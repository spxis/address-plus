{"version":3,"sources":["../src/data/ca-provinces.ts","../src/data/ca-street-types.ts","../src/data/directionals.ts","../src/data/facility-patterns.ts","../src/data/postal-patterns.ts","../src/data/secondary-unit-types.ts","../src/data/us-states.ts","../src/data/us-street-types.ts","../src/utils.ts","../src/parser.ts","../src/index.ts"],"sourcesContent":["import type { Region } from \"../types/region.js\";\n\n/**\n * Canadian provinces and territories mapping\n */\n\n/**\n * Official Canadian province and territory names in English mapped to their abbreviations\n */\nconst CA_PROVINCE_NAMES_EN: Record<string, string> = {\n  alberta: \"AB\",\n  \"british columbia\": \"BC\",\n  manitoba: \"MB\",\n  \"new brunswick\": \"NB\",\n  \"newfoundland and labrador\": \"NL\",\n  \"northwest territories\": \"NT\",\n  \"nova scotia\": \"NS\",\n  nunavut: \"NU\",\n  ontario: \"ON\",\n  \"prince edward island\": \"PE\",\n  quebec: \"QC\",\n  saskatchewan: \"SK\",\n  yukon: \"YT\",\n};\n\n/**\n * Official Canadian province and territory names in French mapped to their abbreviations\n */\nconst CA_PROVINCE_NAMES_FR: Record<string, string> = {\n  alberta: \"AB\",                          // Same in French\n  \"colombie-britannique\": \"BC\",\n  manitoba: \"MB\",                         // Same in French\n  \"nouveau-brunswick\": \"NB\",\n  \"terre-neuve-et-labrador\": \"NL\",\n  \"territoires du nord-ouest\": \"NT\",\n  \"nouvelle-écosse\": \"NS\",\n  nunavut: \"NU\",                          // Same in French (Inuktitut origin)\n  ontario: \"ON\",                          // Same in French\n  \"île-du-prince-édouard\": \"PE\",\n  québec: \"QC\",\n  saskatchewan: \"SK\",                     // Same in French (Cree origin)\n  yukon: \"YT\",                            // Same in French\n};\n\n/**\n * Combined official Canadian province and territory names (English and French)\n */\nconst CA_PROVINCE_NAMES: Record<string, string> = {\n  ...CA_PROVINCE_NAMES_EN,\n  ...CA_PROVINCE_NAMES_FR,\n};\n\n/**\n * Common shortened forms, abbreviations, and alternative names for Canadian provinces\n */\nconst CA_PROVINCE_ALTERNATIVES: Record<string, string> = {\n  // Alberta\n  alb: \"AB\",\n  alta: \"AB\",\n  \n  // Manitoba  \n  man: \"MB\",\n  \n  // Newfoundland and Labrador\n  newfoundland: \"NL\",\n  labrador: \"NL\",\n  \"terre-neuve\": \"NL\",\n  \"terre neuve\": \"NL\",\n  \"terre neuve et labrador\": \"NL\",\n  tnl: \"NL\",\n  \n  // Northwest Territories\n  northwest: \"NT\",\n  territories: \"NT\",\n  territoires: \"NT\",\n  nwt: \"NT\",\n  \"tn-o\": \"NT\",\n  \n  // Nunavut\n  nvt: \"NU\",\n  \n  // Ontario\n  ont: \"ON\",\n  \n  // Prince Edward Island\n  pei: \"PE\",\n  \"prince edward\": \"PE\",\n  \"ile-du-prince-édouard\": \"PE\",  // without circumflex\n  \"île du prince édouard\": \"PE\",   // without hyphens\n  \"ile du prince édouard\": \"PE\",   // without circumflex or hyphens\n  \"îpé\": \"PE\",\n  \n  // Saskatchewan\n  sask: \"SK\",\n};\n\n/**\n * Combined mapping of all Canadian province names and alternatives to their abbreviations\n */\nconst CA_PROVINCES: Record<string, string> = {\n  ...CA_PROVINCE_NAMES,\n  ...CA_PROVINCE_ALTERNATIVES,\n};\n\n/**\n * Array of Canadian provinces and territories as Region objects for fuzzy matching\n */\nconst CA_REGIONS: Region[] = Object.entries(CA_PROVINCES).map(([name, abbr]) => ({\n  abbr,\n  country: \"CA\",\n  name,\n}));\n\nexport { \n  CA_PROVINCES, \n  CA_REGIONS, \n  CA_PROVINCE_NAMES, \n  CA_PROVINCE_NAMES_EN, \n  CA_PROVINCE_NAMES_FR, \n  CA_PROVINCE_ALTERNATIVES \n};","/**\n * Canadian Street Types (Canada Post official abbreviations) - bilingual\n */\n\n/**\n * Mapping of Canadian street types and their variations to official Canada Post abbreviations\n * Includes both English and French terms\n */\nconst CA_STREET_TYPES: Record<string, string> = {\n  // English\n  autoroute: \"aut\",\n  av: \"ave\",\n  avenue: \"ave\",\n  blvd: \"blvd\",\n  boul: \"blvd\",\n  boulevard: \"blvd\",\n  carref: \"carref\",\n  carrefour: \"carref\",\n  cercle: \"cir\",\n  ch: \"ch\",\n  chemin: \"ch\",\n  cir: \"cir\",\n  circ: \"cir\",\n  circle: \"cir\",\n  cour: \"cour\",\n  court: \"crt\",\n  côte: \"côte\",\n  cres: \"cres\",\n  crescent: \"cres\",\n  crois: \"crois\",\n  croissant: \"crois\",\n  crt: \"crt\",\n  ct: \"crt\",\n  dr: \"dr\",\n  drive: \"dr\",\n  expy: \"expy\",\n  expressway: \"expy\",\n  freeway: \"fwy\",\n  fwy: \"fwy\",\n  gardens: \"gdns\",\n  gate: \"gate\",\n  gdns: \"gdns\",\n  grove: \"grove\",\n  heights: \"hts\",\n  hill: \"hill\",\n  highway: \"hwy\",\n  hts: \"hts\",\n  hwy: \"hwy\",\n  imp: \"imp\",\n  impasse: \"imp\",\n  lane: \"lane\",\n  mtée: \"mtée\",\n  montée: \"mtée\",\n  park: \"pk\",\n  parkway: \"pky\",\n  pass: \"pass\",\n  passage: \"pass\",\n  pk: \"pk\",\n  pky: \"pky\",\n  pl: \"pl\",\n  place: \"pl\",\n  plaza: \"plaza\",\n  point: \"pt\",\n  prom: \"prom\",\n  promenade: \"prom\",\n  pt: \"pt\",\n  rang: \"rang\",\n  rd: \"rd\",\n  rle: \"rle\",\n  road: \"rd\",\n  route: \"rte\",\n  rte: \"rte\",\n  rue: \"rue\",\n  ruelle: \"rle\",\n  sent: \"sent\",\n  sentier: \"sent\",\n  sq: \"sq\",\n  square: \"sq\",\n  st: \"st\",\n  street: \"st\",\n  terr: \"terr\",\n  terrace: \"terr\",\n  terrasse: \"terr\",\n  trail: \"trail\",\n  voie: \"voie\",\n  way: \"way\",\n};\n\nexport { CA_STREET_TYPES };","/**\n * Directional abbreviations for US and Canadian addresses\n */\n\n/**\n * Mapping of directional words to their standard abbreviations\n * Supports both English and French (for Canada)\n */\nconst DIRECTIONAL_MAP: Record<string, string> = {\n  // English\n  east: \"E\",\n  north: \"N\",\n  northeast: \"NE\",\n  northwest: \"NW\",\n  south: \"S\",\n  southeast: \"SE\",\n  southwest: \"SW\",\n  west: \"W\",\n  // Short forms\n  e: \"E\",\n  n: \"N\",\n  ne: \"NE\",\n  nw: \"NW\",\n  s: \"S\",\n  se: \"SE\",\n  sw: \"SW\",\n  w: \"W\",\n  // French (for Canada)\n  est: \"E\",\n  nord: \"N\",\n  \"nord-est\": \"NE\",\n  \"nord-ouest\": \"NW\",\n  ouest: \"W\",\n  sud: \"S\",\n  \"sud-est\": \"SE\",\n  \"sud-ouest\": \"SW\",\n};\n\nexport { DIRECTIONAL_MAP };","/**\n * Facility name recognition patterns\n */\n\n/**\n * Common facility name patterns for extraction\n */\nconst FACILITY_PATTERNS = [\n  /\\b(hospital|medical center|clinic|mall|shopping center|plaza|tower|building|center|centre)\\b/i,\n  /\\b(school|university|college|library|church|temple|mosque|synagogue)\\b/i,\n  /\\b(airport|station|terminal|depot|port|harbor|harbour)\\b/i,\n  /\\b(park|recreation|rec center|community center|civic center)\\b/i,\n];\n\nexport { FACILITY_PATTERNS };","/**\n * Regular expressions for postal code patterns\n */\n\n/**\n * Pattern for US ZIP codes (5 digits, optionally followed by +4)\n */\nconst ZIP_CODE_PATTERN = /^(\\d{5})(?:[-\\s]?(\\d{4}))?$/;\n\n/**\n * Pattern for Canadian postal codes (A1A 1A1 format)\n */\nconst CANADIAN_POSTAL_CODE_PATTERN = /^([A-Za-z]\\d[A-Za-z])\\s?(\\d[A-Za-z]\\d)$/;\n\nexport { CANADIAN_POSTAL_CODE_PATTERN, ZIP_CODE_PATTERN };","/**\n * Secondary unit types and abbreviations\n */\n\n/**\n * Mapping of secondary unit types to their standard abbreviations\n */\nconst SECONDARY_UNIT_TYPES: Record<string, string> = {\n  apartment: \"apt\",\n  apartme: \"apt\",\n  apt: \"apt\",\n  basement: \"bsmt\",\n  bld: \"bldg\",\n  bldg: \"bldg\",\n  bsmt: \"bsmt\",\n  building: \"bldg\",\n  department: \"dept\",\n  dept: \"dept\",\n  fl: \"fl\",\n  floor: \"fl\",\n  flr: \"fl\",\n  front: \"frnt\",\n  frnt: \"frnt\",\n  hanger: \"hngr\",\n  hngr: \"hngr\",\n  key: \"key\",\n  lbby: \"lbby\",\n  lobby: \"lbby\",\n  lot: \"lot\",\n  lower: \"lowr\",\n  lowr: \"lowr\",\n  ofc: \"ofc\",\n  office: \"ofc\",\n  penthouse: \"ph\",\n  ph: \"ph\",\n  pier: \"pier\",\n  rear: \"rear\",\n  rm: \"rm\",\n  room: \"rm\",\n  side: \"side\",\n  slip: \"slip\",\n  space: \"spc\",\n  spc: \"spc\",\n  ste: \"ste\",\n  stop: \"stop\",\n  su: \"ste\",\n  suite: \"ste\",\n  trailer: \"trlr\",\n  trlr: \"trlr\",\n  unit: \"unit\",\n  upper: \"uppr\",\n  uppr: \"uppr\",\n};\n\nexport { SECONDARY_UNIT_TYPES };","import type { Region } from \"../types/region.js\";\n\n/**\n * US States and territories mapping\n */\n\n/**\n * Official US state and territory names mapped to their abbreviations\n */\nconst US_STATE_NAMES: Record<string, string> = {\n  alabama: \"AL\",\n  alaska: \"AK\",\n  \"american samoa\": \"AS\",\n  arizona: \"AZ\",\n  arkansas: \"AR\",\n  california: \"CA\",\n  colorado: \"CO\",\n  connecticut: \"CT\",\n  delaware: \"DE\",\n  \"district of columbia\": \"DC\",\n  florida: \"FL\",\n  georgia: \"GA\",\n  guam: \"GU\",\n  hawaii: \"HI\",\n  idaho: \"ID\",\n  illinois: \"IL\",\n  indiana: \"IN\",\n  iowa: \"IA\",\n  kansas: \"KS\",\n  kentucky: \"KY\",\n  louisiana: \"LA\",\n  maine: \"ME\",\n  maryland: \"MD\",\n  massachusetts: \"MA\",\n  michigan: \"MI\",\n  minnesota: \"MN\",\n  mississippi: \"MS\",\n  missouri: \"MO\",\n  montana: \"MT\",\n  nebraska: \"NE\",\n  nevada: \"NV\",\n  \"new hampshire\": \"NH\",\n  \"new jersey\": \"NJ\",\n  \"new mexico\": \"NM\",\n  \"new york\": \"NY\",\n  \"north carolina\": \"NC\",\n  \"north dakota\": \"ND\",\n  \"northern mariana islands\": \"MP\",\n  ohio: \"OH\",\n  oklahoma: \"OK\",\n  oregon: \"OR\",\n  pennsylvania: \"PA\",\n  \"puerto rico\": \"PR\",\n  \"rhode island\": \"RI\",\n  \"south carolina\": \"SC\",\n  \"south dakota\": \"SD\",\n  tennessee: \"TN\",\n  texas: \"TX\",\n  utah: \"UT\",\n  vermont: \"VT\",\n  \"virgin islands\": \"VI\",\n  virginia: \"VA\",\n  washington: \"WA\",\n  \"west virginia\": \"WV\",\n  wisconsin: \"WI\",\n  wyoming: \"WY\",\n};\n\n/**\n * Common shortened forms, abbreviations, and alternative names for US states\n */\nconst US_STATE_ALTERNATIVES: Record<string, string> = {\n  // Alabama\n  ala: \"AL\",\n  bama: \"AL\",\n  \n  // Arizona\n  ariz: \"AZ\",\n  \n  // Arkansas\n  ark: \"AR\",\n  \n  // California\n  cal: \"CA\",\n  cali: \"CA\",\n  calif: \"CA\",\n  \n  // Colorado\n  colo: \"CO\",\n  \n  // Connecticut\n  conn: \"CT\",\n  \n  // Delaware\n  del: \"DE\",\n  \n  // District of Columbia\n  dc: \"DC\",\n  \n  // Florida\n  fla: \"FL\",\n  \n  // Illinois\n  ill: \"IL\",\n  \n  // Indiana\n  ind: \"IN\",\n  \n  // Kansas\n  kan: \"KS\",\n  kans: \"KS\",\n  \n  // Kentucky\n  ky: \"KY\",\n  kent: \"KY\",\n  \n  // Louisiana\n  la: \"LA\",\n  lou: \"LA\",\n  \n  // Massachusetts\n  mass: \"MA\",\n  \n  // Michigan\n  mich: \"MI\",\n  \n  // Minnesota\n  minn: \"MN\",\n  \n  // Mississippi\n  miss: \"MS\",\n  \n  // Missouri\n  mo: \"MO\",\n  \n  // Montana\n  mont: \"MT\",\n  \n  // Nebraska\n  neb: \"NE\",\n  nebr: \"NE\",\n  \n  // Nevada\n  nev: \"NV\",\n  \n  // New Hampshire\n  \"new hamp\": \"NH\",\n  \"new hampsh\": \"NH\",\n  \n  // New Jersey\n  \"new jers\": \"NJ\",\n  \n  // New Mexico\n  \"new mex\": \"NM\",\n  \"new mexic\": \"NM\",\n  \n  // North Carolina\n  \"n carolina\": \"NC\",\n  \"north car\": \"NC\",\n  \n  // North Dakota\n  \"n dakota\": \"ND\",\n  \"north dak\": \"ND\",\n  \n  // Oklahoma\n  okla: \"OK\",\n  \n  // Oregon\n  ore: \"OR\",\n  oreg: \"OR\",\n  \n  // Pennsylvania\n  penn: \"PA\",\n  pa: \"PA\",\n  penna: \"PA\",\n  pennsyl: \"PA\",\n  \n  // Rhode Island\n  \"rhode isl\": \"RI\",\n  \n  // South Carolina\n  \"s carolina\": \"SC\",\n  \"south car\": \"SC\",\n  \n  // South Dakota\n  \"s dakota\": \"SD\",\n  \"south dak\": \"SD\",\n  \n  // Tennessee\n  tenn: \"TN\",\n  \n  // Texas\n  tex: \"TX\",\n  \n  // Vermont\n  vt: \"VT\",\n  \n  // Virginia\n  va: \"VA\",\n  virg: \"VA\",\n  \n  // Washington\n  wash: \"WA\",\n  \n  // West Virginia\n  \"west va\": \"WV\",\n  \"west virg\": \"WV\",\n  \n  // Wisconsin\n  wis: \"WI\",\n  wisc: \"WI\",\n  \n  // Wyoming\n  wyo: \"WY\",\n};\n\n/**\n * Combined mapping of all US state names and alternatives to their abbreviations\n */\nconst US_STATES: Record<string, string> = {\n  ...US_STATE_NAMES,\n  ...US_STATE_ALTERNATIVES,\n};\n\n/**\n * Array of US states and territories as Region objects for fuzzy matching\n */\nconst US_REGIONS: Region[] = Object.entries(US_STATES).map(([name, abbr]) => ({\n  abbr,\n  country: \"US\",\n  name,\n}));\n\nexport { US_REGIONS, US_STATES, US_STATE_NAMES, US_STATE_ALTERNATIVES };","/**\n * US Street Types (USPS official abbreviations)\n */\n\n/**\n * Mapping of US street types and their variations to official USPS abbreviations\n */\nconst US_STREET_TYPES: Record<string, string> = {\n  allee: \"aly\",\n  alley: \"aly\",\n  ally: \"aly\",\n  anex: \"anx\",\n  annex: \"anx\",\n  annx: \"anx\",\n  arcade: \"arc\",\n  av: \"ave\",\n  ave: \"ave\",\n  aven: \"ave\",\n  avenu: \"ave\",\n  avenue: \"ave\",\n  avn: \"ave\",\n  avnue: \"ave\",\n  bayoo: \"byu\",\n  bayou: \"byu\",\n  beach: \"bch\",\n  bend: \"bnd\",\n  blf: \"blf\",\n  bluf: \"blf\",\n  bluff: \"blf\",\n  bluffs: \"blfs\",\n  bot: \"btm\",\n  bottom: \"btm\",\n  bottm: \"btm\",\n  boul: \"blvd\",\n  boulevard: \"blvd\",\n  boulv: \"blvd\",\n  branch: \"br\",\n  brdge: \"brg\",\n  bridge: \"brg\",\n  brnch: \"br\",\n  brook: \"brk\",\n  brooks: \"brks\",\n  burg: \"bg\",\n  burgs: \"bgs\",\n  byp: \"byp\",\n  bypa: \"byp\",\n  bypas: \"byp\",\n  bypass: \"byp\",\n  byps: \"byp\",\n  camp: \"cp\",\n  canyn: \"cyn\",\n  canyon: \"cyn\",\n  cape: \"cpe\",\n  causeway: \"cswy\",\n  causwa: \"cswy\",\n  cent: \"ctr\",\n  center: \"ctr\",\n  centr: \"ctr\",\n  centre: \"ctr\",\n  centers: \"ctrs\",\n  cir: \"cir\",\n  circ: \"cir\",\n  circl: \"cir\",\n  circle: \"cir\",\n  circles: \"cirs\",\n  cliff: \"clf\",\n  cliffs: \"clfs\",\n  club: \"clb\",\n  cmp: \"cp\",\n  cnter: \"ctr\",\n  cntr: \"ctr\",\n  cnyn: \"cyn\",\n  cmn: \"cmn\",\n  cmns: \"cmns\",\n  common: \"cmn\",\n  commons: \"cmns\",\n  cor: \"cor\",\n  corner: \"cor\",\n  corners: \"cors\",\n  cors: \"cors\",\n  course: \"crse\",\n  court: \"ct\",\n  courts: \"cts\",\n  cove: \"cv\",\n  coves: \"cvs\",\n  crcl: \"cir\",\n  crcle: \"cir\",\n  creek: \"crk\",\n  cres: \"cres\",\n  crescent: \"cres\",\n  crest: \"crst\",\n  crossing: \"xing\",\n  crossroad: \"xrd\",\n  crossroads: \"xrds\",\n  crsent: \"cres\",\n  crsnt: \"cres\",\n  crssing: \"xing\",\n  crssng: \"xing\",\n  crt: \"ct\",\n  curve: \"curv\",\n  dale: \"dl\",\n  dam: \"dm\",\n  div: \"dv\",\n  divide: \"dv\",\n  dr: \"dr\",\n  driv: \"dr\",\n  drive: \"dr\",\n  drives: \"drs\",\n  drv: \"dr\",\n  dvd: \"dv\",\n  est: \"est\",\n  estate: \"est\",\n  estates: \"ests\",\n  exp: \"expy\",\n  expr: \"expy\",\n  express: \"expy\",\n  expressway: \"expy\",\n  expw: \"expy\",\n  expy: \"expy\",\n  ext: \"ext\",\n  extension: \"ext\",\n  extensions: \"exts\",\n  extn: \"ext\",\n  extnsn: \"ext\",\n  fall: \"fall\",\n  falls: \"fls\",\n  ferry: \"fry\",\n  field: \"fld\",\n  fields: \"flds\",\n  flat: \"flt\",\n  flats: \"flts\",\n  fls: \"fls\",\n  ford: \"frd\",\n  fords: \"frds\",\n  forg: \"frg\",\n  forge: \"frg\",\n  forges: \"frgs\",\n  fork: \"frk\",\n  forks: \"frks\",\n  forest: \"frst\",\n  forests: \"frst\",\n  fort: \"ft\",\n  frd: \"frd\",\n  frds: \"frds\",\n  freewy: \"fwy\",\n  freeway: \"fwy\",\n  frg: \"frg\",\n  frgs: \"frgs\",\n  frk: \"frk\",\n  frks: \"frks\",\n  frry: \"fry\",\n  frst: \"frst\",\n  frt: \"ft\",\n  frway: \"fwy\",\n  frwy: \"fwy\",\n  fry: \"fry\",\n  ft: \"ft\",\n  fwy: \"fwy\",\n  garden: \"gdn\",\n  gardens: \"gdns\",\n  gardn: \"gdn\",\n  gatewy: \"gtwy\",\n  gateway: \"gtwy\",\n  gatway: \"gtwy\",\n  gdn: \"gdn\",\n  gdns: \"gdns\",\n  glen: \"gln\",\n  glens: \"glns\",\n  grden: \"gdn\",\n  grdn: \"gdn\",\n  grdns: \"gdns\",\n  green: \"grn\",\n  greens: \"grns\",\n  grov: \"grv\",\n  grove: \"grv\",\n  groves: \"grvs\",\n  gtway: \"gtwy\",\n  gtwy: \"gtwy\",\n  harb: \"hbr\",\n  harbor: \"hbr\",\n  harbors: \"hbrs\",\n  harbr: \"hbr\",\n  haven: \"hvn\",\n  hbr: \"hbr\",\n  hbrs: \"hbrs\",\n  height: \"hts\",\n  heights: \"hts\",\n  hgts: \"hts\",\n  highway: \"hwy\",\n  highwy: \"hwy\",\n  hill: \"hl\",\n  hills: \"hls\",\n  hiway: \"hwy\",\n  hiwy: \"hwy\",\n  hl: \"hl\",\n  hllw: \"holw\",\n  hls: \"hls\",\n  hollow: \"holw\",\n  hollows: \"holw\",\n  holw: \"holw\",\n  holws: \"holw\",\n  hrbor: \"hbr\",\n  ht: \"hts\",\n  hts: \"hts\",\n  hvn: \"hvn\",\n  hway: \"hwy\",\n  hwy: \"hwy\",\n  inlet: \"inlt\",\n  inlt: \"inlt\",\n  is: \"is\",\n  island: \"is\",\n  islands: \"iss\",\n  isle: \"isle\",\n  isles: \"isle\",\n  islnd: \"is\",\n  islnds: \"iss\",\n  iss: \"iss\",\n  jct: \"jct\",\n  jction: \"jct\",\n  jctn: \"jct\",\n  jctns: \"jcts\",\n  jcts: \"jcts\",\n  junctn: \"jct\",\n  junction: \"jct\",\n  junctions: \"jcts\",\n  juncton: \"jct\",\n  key: \"ky\",\n  keys: \"kys\",\n  knl: \"knl\",\n  knol: \"knl\",\n  knoll: \"knl\",\n  knolls: \"knls\",\n  knols: \"knls\",\n  ky: \"ky\",\n  kys: \"kys\",\n  lake: \"lk\",\n  lakes: \"lks\",\n  land: \"land\",\n  landing: \"lndg\",\n  lane: \"ln\",\n  lanes: \"ln\",\n  ldg: \"ldg\",\n  ldge: \"ldg\",\n  lf: \"lf\",\n  lgt: \"lgt\",\n  lgts: \"lgts\",\n  light: \"lgt\",\n  lights: \"lgts\",\n  lk: \"lk\",\n  lks: \"lks\",\n  ln: \"ln\",\n  lndg: \"lndg\",\n  lndng: \"lndg\",\n  loaf: \"lf\",\n  lck: \"lck\",\n  lcks: \"lcks\",\n  lock: \"lck\",\n  locks: \"lcks\",\n  lodg: \"ldg\",\n  lodge: \"ldg\",\n  loop: \"loop\",\n  loops: \"loop\",\n  mall: \"mall\",\n  manr: \"mnr\",\n  manor: \"mnr\",\n  manors: \"mnrs\",\n  manrs: \"mnrs\",\n  mdw: \"mdw\",\n  mdws: \"mdws\",\n  meadow: \"mdw\",\n  meadows: \"mdws\",\n  medows: \"mdws\",\n  mews: \"mews\",\n  mill: \"ml\",\n  mills: \"mls\",\n  mission: \"msn\",\n  missn: \"msn\",\n  ml: \"ml\",\n  mls: \"mls\",\n  mnt: \"mt\",\n  mntain: \"mtn\",\n  mntn: \"mtn\",\n  mntns: \"mtns\",\n  mnr: \"mnr\",\n  mnrs: \"mnrs\",\n  motorway: \"mtwy\",\n  mount: \"mt\",\n  mountain: \"mtn\",\n  mountains: \"mtns\",\n  mountin: \"mtn\",\n  msn: \"msn\",\n  mssn: \"msn\",\n  mt: \"mt\",\n  mtin: \"mtn\",\n  mtn: \"mtn\",\n  mtns: \"mtns\",\n  mtwy: \"mtwy\",\n  nck: \"nck\",\n  neck: \"nck\",\n  opas: \"opas\",\n  orch: \"orch\",\n  orchard: \"orch\",\n  orchrd: \"orch\",\n  oval: \"oval\",\n  overpass: \"opas\",\n  park: \"park\",\n  parks: \"park\",\n  parkway: \"pkwy\",\n  parkways: \"pkwy\",\n  parkwy: \"pkwy\",\n  pass: \"pass\",\n  passage: \"psge\",\n  path: \"path\",\n  paths: \"path\",\n  pike: \"pike\",\n  pikes: \"pike\",\n  pine: \"pne\",\n  pines: \"pnes\",\n  pky: \"pkwy\",\n  pkway: \"pkwy\",\n  pkwy: \"pkwy\",\n  pkwys: \"pkwy\",\n  pl: \"pl\",\n  place: \"pl\",\n  plain: \"pln\",\n  plains: \"plns\",\n  plaza: \"plz\",\n  plc: \"pl\",\n  pln: \"pln\",\n  plns: \"plns\",\n  plz: \"plz\",\n  plza: \"plz\",\n  pne: \"pne\",\n  pnes: \"pnes\",\n  point: \"pt\",\n  points: \"pts\",\n  port: \"prt\",\n  ports: \"prts\",\n  pr: \"pr\",\n  prairie: \"pr\",\n  prarie: \"pr\",\n  prk: \"park\",\n  prr: \"pr\",\n  prt: \"prt\",\n  prts: \"prts\",\n  psge: \"psge\",\n  pt: \"pt\",\n  pts: \"pts\",\n  rad: \"radl\",\n  radial: \"radl\",\n  radl: \"radl\",\n  ramp: \"ramp\",\n  ranch: \"rnch\",\n  ranches: \"rnch\",\n  rapid: \"rpd\",\n  rapids: \"rpds\",\n  rd: \"rd\",\n  rdg: \"rdg\",\n  rdge: \"rdg\",\n  rdgs: \"rdgs\",\n  rds: \"rds\",\n  rest: \"rst\",\n  ridge: \"rdg\",\n  ridges: \"rdgs\",\n  riv: \"riv\",\n  river: \"riv\",\n  rivr: \"riv\",\n  rnch: \"rnch\",\n  rnchs: \"rnch\",\n  road: \"rd\",\n  roads: \"rds\",\n  route: \"rte\",\n  row: \"row\",\n  rpd: \"rpd\",\n  rpds: \"rpds\",\n  rst: \"rst\",\n  rte: \"rte\",\n  rue: \"rue\",\n  run: \"run\",\n  rvr: \"riv\",\n  shl: \"shl\",\n  shls: \"shls\",\n  shoal: \"shl\",\n  shoals: \"shls\",\n  shoar: \"shr\",\n  shoars: \"shrs\",\n  shore: \"shr\",\n  shores: \"shrs\",\n  shr: \"shr\",\n  shrs: \"shrs\",\n  skyway: \"skwy\",\n  skwy: \"skwy\",\n  spg: \"spg\",\n  spgs: \"spgs\",\n  spng: \"spg\",\n  spngs: \"spgs\",\n  spring: \"spg\",\n  springs: \"spgs\",\n  sprng: \"spg\",\n  sprngs: \"spgs\",\n  spur: \"spur\",\n  spurs: \"spur\",\n  sq: \"sq\",\n  sqr: \"sq\",\n  sqre: \"sq\",\n  sqrs: \"sqs\",\n  sqs: \"sqs\",\n  squ: \"sq\",\n  square: \"sq\",\n  squares: \"sqs\",\n  st: \"st\",\n  sta: \"sta\",\n  station: \"sta\",\n  statn: \"sta\",\n  stn: \"sta\",\n  str: \"st\",\n  stra: \"stra\",\n  strav: \"stra\",\n  straven: \"stra\",\n  stravenue: \"stra\",\n  stream: \"strm\",\n  streme: \"strm\",\n  street: \"st\",\n  streets: \"sts\",\n  strm: \"strm\",\n  strt: \"st\",\n  strvn: \"stra\",\n  strvnue: \"stra\",\n  sts: \"sts\",\n  sumit: \"smt\",\n  sumitt: \"smt\",\n  summit: \"smt\",\n  smt: \"smt\",\n  ter: \"ter\",\n  terr: \"ter\",\n  terrace: \"ter\",\n  throughway: \"trwy\",\n  tpke: \"tpke\",\n  trace: \"trce\",\n  traces: \"trce\",\n  track: \"trak\",\n  tracks: \"trak\",\n  trafficway: \"trfy\",\n  trail: \"trl\",\n  trailer: \"trlr\",\n  trails: \"trl\",\n  trak: \"trak\",\n  trce: \"trce\",\n  trfy: \"trfy\",\n  trk: \"trak\",\n  trks: \"trak\",\n  trl: \"trl\",\n  trlr: \"trlr\",\n  trlrs: \"trlr\",\n  trls: \"trl\",\n  trnpk: \"tpke\",\n  trwy: \"trwy\",\n  tunel: \"tunl\",\n  tunl: \"tunl\",\n  tunls: \"tunl\",\n  tunnel: \"tunl\",\n  tunnels: \"tunl\",\n  tunnl: \"tunl\",\n  turnpike: \"tpke\",\n  turnpk: \"tpke\",\n  un: \"un\",\n  underpass: \"upas\",\n  union: \"un\",\n  unions: \"uns\",\n  uns: \"uns\",\n  upas: \"upas\",\n  valley: \"vly\",\n  valleys: \"vlys\",\n  vally: \"vly\",\n  vdct: \"via\",\n  via: \"via\",\n  viadct: \"via\",\n  viaduct: \"via\",\n  view: \"vw\",\n  views: \"vws\",\n  vill: \"vlg\",\n  villag: \"vlg\",\n  village: \"vlg\",\n  villages: \"vlgs\",\n  villg: \"vlg\",\n  villiage: \"vlg\",\n  ville: \"vl\",\n  vis: \"vis\",\n  vist: \"vis\",\n  vista: \"vis\",\n  vl: \"vl\",\n  vlg: \"vlg\",\n  vlgs: \"vlgs\",\n  vlly: \"vly\",\n  vly: \"vly\",\n  vlys: \"vlys\",\n  vst: \"vis\",\n  vsta: \"vis\",\n  vw: \"vw\",\n  vws: \"vws\",\n  walk: \"walk\",\n  walks: \"walk\",\n  wall: \"wall\",\n  way: \"way\",\n  ways: \"ways\",\n  well: \"wl\",\n  wells: \"wls\",\n  wl: \"wl\",\n  wls: \"wls\",\n  wy: \"way\",\n  xing: \"xing\",\n  xrd: \"xrd\",\n  xrds: \"xrds\",\n};\n\nexport { US_STREET_TYPES };","/**\n * Core parsing utilities and regex patterns\n */\n\nimport {\n  DIRECTIONAL_MAP,\n  US_STREET_TYPES,\n  CA_STREET_TYPES,\n  US_STATES,\n  CA_PROVINCES,\n  SECONDARY_UNIT_TYPES,\n  ZIP_CODE_PATTERN,\n  CANADIAN_POSTAL_CODE_PATTERN,\n  FACILITY_PATTERNS,\n} from './data';\nimport { ParsedAddress, ParseOptions } from './types';\n\n/**\n * Normalize text for consistent parsing\n */\nfunction normalizeText(text: string): string {\n  return text\n    .toLowerCase()\n    .replace(/\\s+/g, ' ')\n    .replace(/[.,;]/g, ' ')\n    .trim();\n}\n\n/**\n * Build regex patterns from dictionary\n */\nfunction buildRegexFromDict(dict: Record<string, string>, capture = true): RegExp {\n  const keys = Object.keys(dict).sort((a, b) => b.length - a.length);\n  const pattern = keys.map(key => key.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')).join('|');\n  return new RegExp(capture ? `\\\\b(${pattern})\\\\b` : `\\\\b(?:${pattern})\\\\b`, 'i');\n}\n\n/**\n * Extract and normalize directional\n */\nfunction parseDirectional(text: string): { direction: string | undefined; remaining: string } {\n  const dirPattern = buildRegexFromDict(DIRECTIONAL_MAP);\n  const match = text.match(dirPattern);\n  \n  if (match) {\n    const direction = DIRECTIONAL_MAP[match[1].toLowerCase()];\n    const remaining = text.replace(dirPattern, ' ').replace(/\\s+/g, ' ').trim();\n    return { direction, remaining };\n  }\n  \n  return { direction: undefined, remaining: text };\n}\n\n/**\n * Extract and normalize street type\n */\nfunction parseStreetType(text: string, country: 'US' | 'CA' = 'US'): { type: string | undefined; remaining: string } {\n  const typeMap = country === 'CA' ? { ...US_STREET_TYPES, ...CA_STREET_TYPES } : US_STREET_TYPES;\n  const typePattern = buildRegexFromDict(typeMap);\n  const match = text.match(typePattern);\n  \n  if (match) {\n    const type = typeMap[match[1].toLowerCase()];\n    const remaining = text.replace(typePattern, ' ').replace(/\\s+/g, ' ').trim();\n    return { type, remaining };\n  }\n  \n  return { type: undefined, remaining: text };\n}\n\n/**\n * Extract state or province  \n */\nfunction parseStateProvince(text: string, country?: 'US' | 'CA'): { state: string | undefined; remaining: string; detectedCountry?: 'US' | 'CA' } {\n  // Try US state abbreviations first (more specific than full names)\n  const usAbbrevPattern = new RegExp(`\\\\b(${Object.values(US_STATES).join('|')})\\\\b`, 'i');\n  let match = text.match(usAbbrevPattern);\n  if (match) {\n    const state = match[1].toUpperCase();\n    const remaining = text.replace(new RegExp(`\\\\b${match[1].replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')}\\\\b`, 'i'), ' ').replace(/\\s+/g, ' ').trim();\n    return { state, remaining, detectedCountry: 'US' };\n  }\n  \n  // Try Canadian province abbreviations\n  const caAbbrevPattern = new RegExp(`\\\\b(${Object.values(CA_PROVINCES).join('|')})\\\\b`, 'i');\n  match = text.match(caAbbrevPattern);\n  if (match) {\n    const state = match[1].toUpperCase();\n    const remaining = text.replace(new RegExp(`\\\\b${match[1].replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')}\\\\b`, 'i'), ' ').replace(/\\s+/g, ' ').trim();\n    return { state, remaining, detectedCountry: 'CA' };\n  }\n  \n  // Try US states full names (only if no abbreviation found)\n  const usPattern = buildRegexFromDict(US_STATES);\n  match = text.match(usPattern);\n  if (match) {\n    const state = US_STATES[match[1].toLowerCase()];\n    const remaining = text.replace(new RegExp(`\\\\b${match[1].replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')}\\\\b`, 'gi'), ' ').replace(/\\s+/g, ' ').trim();\n    return { state, remaining, detectedCountry: 'US' };\n  }\n  \n  // Try Canadian provinces full names\n  const caPattern = buildRegexFromDict(CA_PROVINCES);\n  match = text.match(caPattern);\n  if (match) {\n    const state = CA_PROVINCES[match[1].toLowerCase()];\n    const remaining = text.replace(new RegExp(`\\\\b${match[1].replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')}\\\\b`, 'gi'), ' ').replace(/\\s+/g, ' ').trim();\n    return { state, remaining, detectedCountry: 'CA' };\n  }\n  \n  return { state: undefined, remaining: text };\n}\n\n/**\n * Extract postal code (ZIP or Canadian postal code)\n */\nfunction parsePostalCode(text: string): { zip: string | undefined; zipext: string | undefined; remaining: string; detectedCountry?: 'US' | 'CA' } {\n  // Try US ZIP code - look for it anywhere in the text\n  const zipMatch = text.match(/\\b(\\d{5})(?:[-\\s]?(\\d{4}))?\\b/);\n  if (zipMatch) {\n    const zip = zipMatch[1];\n    const zipext = zipMatch[2];\n    const remaining = text.replace(zipMatch[0], ' ').replace(/\\s+/g, ' ').trim();\n    return { zip, zipext, remaining, detectedCountry: 'US' };\n  }\n  \n  // Try Canadian postal code - look for it anywhere in the text\n  const postalMatch = text.match(/\\b([A-Za-z]\\d[A-Za-z])\\s?(\\d[A-Za-z]\\d)\\b/);\n  if (postalMatch) {\n    const zip = `${postalMatch[1]} ${postalMatch[2]}`.toUpperCase();\n    const remaining = text.replace(postalMatch[0], ' ').replace(/\\s+/g, ' ').trim();\n    return { zip, zipext: undefined, remaining, detectedCountry: 'CA' };\n  }\n  \n  return { zip: undefined, zipext: undefined, remaining: text };\n}\n\n/**\n * Parse secondary unit information (apartment, suite, etc.)\n */\nfunction parseSecondaryUnit(text: string): { \n  unit: string | undefined; \n  sec_unit_type: string | undefined; \n  sec_unit_num: string | undefined; \n  remaining: string;\n} {\n  const unitPattern = buildRegexFromDict(SECONDARY_UNIT_TYPES);\n  \n  // Look for unit type followed by number\n  const unitMatch = text.match(new RegExp(`${unitPattern.source}\\\\s*(\\\\d+\\\\w*|[a-zA-Z]+\\\\d*)`));\n  if (unitMatch) {\n    const sec_unit_type = SECONDARY_UNIT_TYPES[unitMatch[1].toLowerCase()];\n    const sec_unit_num = unitMatch[2];\n    const unit = `${sec_unit_type} ${sec_unit_num}`;\n    const remaining = text.replace(unitMatch[0], ' ').replace(/\\s+/g, ' ').trim();\n    return { unit, sec_unit_type, sec_unit_num, remaining };\n  }\n  \n  // Look for just numbers that might be unit numbers\n  const numberMatch = text.match(/\\b(apt|apartment|unit|ste|suite|#)\\s*(\\d+\\w*)\\b/i);\n  if (numberMatch) {\n    const sec_unit_type = SECONDARY_UNIT_TYPES[numberMatch[1].toLowerCase()] || numberMatch[1].toLowerCase();\n    const sec_unit_num = numberMatch[2];\n    const unit = `${sec_unit_type} ${sec_unit_num}`;\n    const remaining = text.replace(numberMatch[0], ' ').replace(/\\s+/g, ' ').trim();\n    return { unit, sec_unit_type, sec_unit_num, remaining };\n  }\n  \n  return { unit: undefined, sec_unit_type: undefined, sec_unit_num: undefined, remaining: text };\n}\n\n/**\n * Extract facility names\n */\n/**\n * Parse facility information from address\n */\nfunction parseFacility(text: string): { facility: string | undefined; remaining: string } {\n  for (const pattern of FACILITY_PATTERNS) {\n    const match = text.match(pattern);\n    if (match) {\n      // Try to extract the full facility name (word before + match + word after if relevant)\n      const fullMatch = text.match(new RegExp(`\\\\b[\\\\w\\\\s]*${match[0]}[\\\\w\\\\s]*\\\\b`, 'i'));\n      if (fullMatch) {\n        const facility = fullMatch[0].trim();\n        const remaining = text.replace(fullMatch[0], ' ').replace(/\\s+/g, ' ').trim();\n        return { facility, remaining };\n      }\n    }\n  }\n  \n  return { facility: undefined, remaining: text };\n}\n\n/**\n * Parse parenthetical information\n */\nfunction parseParenthetical(text: string): { secondary: string | undefined; remaining: string } {\n  const parenMatch = text.match(/\\(([^)]+)\\)/);\n  if (parenMatch) {\n    const secondary = parenMatch[1].trim();\n    const remaining = text.replace(parenMatch[0], ' ').replace(/\\s+/g, ' ').trim();\n    return { secondary, remaining };\n  }\n  \n  return { secondary: undefined, remaining: text };\n}\n\n/**\n * Extract street number (including fractional)\n */\nfunction parseStreetNumber(text: string): { number: string | undefined; remaining: string } {\n  // Handle fractional numbers like \"123 1/2\" or \"123-1/2\"\n  const fracMatch = text.match(/^\\s*(\\d+(?:\\s*[-\\/]\\s*\\d+\\/\\d+|\\s+\\d+\\/\\d+)?)\\b/);\n  if (fracMatch) {\n    const number = fracMatch[1].replace(/\\s+/g, ' ').trim();\n    const remaining = text.replace(fracMatch[0], ' ').replace(/\\s+/g, ' ').trim();\n    return { number, remaining };\n  }\n  \n  // Handle simple numbers\n  const numMatch = text.match(/^\\s*(\\d+)\\b/);\n  if (numMatch) {\n    const number = numMatch[1];\n    const remaining = text.replace(numMatch[0], ' ').replace(/\\s+/g, ' ').trim();\n    return { number, remaining };\n  }\n  \n  return { number: undefined, remaining: text };\n}\n\n/**\n * Detect country from address components\n */\nfunction detectCountry(address: ParsedAddress): 'US' | 'CA' | undefined {\n  if (address.state) {\n    if (Object.values(US_STATES).includes(address.state) || Object.keys(US_STATES).includes(address.state.toLowerCase())) {\n      return 'US';\n    }\n    if (Object.values(CA_PROVINCES).includes(address.state) || Object.keys(CA_PROVINCES).includes(address.state.toLowerCase())) {\n      return 'CA';\n    }\n  }\n  \n  if (address.zip) {\n    if (ZIP_CODE_PATTERN.test(address.zip)) {\n      return 'US';\n    }\n    if (CANADIAN_POSTAL_CODE_PATTERN.test(address.zip)) {\n      return 'CA';\n    }\n  }\n  \n  return undefined;\n}\n\nexport {\n  buildRegexFromDict,\n  detectCountry,\n  normalizeText,\n  parseDirectional,\n  parseFacility,\n  parseParenthetical,\n  parsePostalCode,\n  parseSecondaryUnit,\n  parseStateProvince,\n  parseStreetNumber,\n  parseStreetType,\n};","/**\n * Main address parser implementation\n * Based on the original parse-address library patterns\n */\n\nimport type { AddressParser, ParsedAddress, ParsedIntersection, ParseOptions } from \"./types\";\nimport {\n  CA_PROVINCES,\n  CA_STREET_TYPES,\n  DIRECTIONAL_MAP,\n  SECONDARY_UNIT_TYPES,\n  US_STATES,\n  US_STREET_TYPES,\n} from \"./data\";\nimport {\n  detectCountry,\n  normalizeText,\n  parseDirectional,\n  parseFacility,\n  parseParenthetical,\n  parsePostalCode,\n  parseSecondaryUnit,\n  parseStateProvince,\n  parseStreetNumber,\n  parseStreetType,\n} from \"./utils\";\n\n// Build regex patterns similar to original parse-address\nconst buildPatterns = () => {\n  const streetTypes = Object.keys(US_STREET_TYPES).concat(Object.values(US_STREET_TYPES))\n    .filter((v, i, arr) => arr.indexOf(v) === i)\n    .sort((a, b) => b.length - a.length)\n    .join('|');\n  \n  const directionals = Object.keys(DIRECTIONAL_MAP).concat(Object.values(DIRECTIONAL_MAP))\n    .filter((v, i, arr) => arr.indexOf(v) === i)\n    .sort((a, b) => b.length - a.length)\n    .join('|');\n  \n  const states = Object.keys(US_STATES).concat(Object.values(US_STATES))\n    .concat(Object.keys(CA_PROVINCES)).concat(Object.values(CA_PROVINCES))\n    .filter((v, i, arr) => arr.indexOf(v) === i)\n    .join('|');\n\n  return {\n    number: String.raw`(\\d+[-\\w]*|\\w\\d+\\w\\d+)`,\n    fraction: String.raw`(\\d+\\/\\d+)`,\n    directional: `(${directionals})`,\n    streetType: `(${streetTypes})`,\n    state: `\\\\b(${states})\\\\b`,\n    zip: String.raw`(\\d{5}(?:[-\\s]\\d{4})?)`,\n    poBox: String.raw`(?:p\\.?o\\.?\\s*box|post\\s*office\\s*box|pobox)\\s*(\\d+)`,\n    intersection: String.raw`\\s+(?:and|&|at|\\@)\\s+`,\n    secUnit: String.raw`(?:(suite?|ste?|apt|apartment|unit|#)\\s*([a-z0-9-]+))`\n  };\n};\n\n/**\n * Parse a location string into address components\n */\nfunction parseLocation(address: string, options: ParseOptions = {}): ParsedAddress | null {\n  if (!address || typeof address !== 'string') {\n    return null;\n  }\n\n  const original = address.trim();\n\n  // Check for intersection first\n  const patterns = buildPatterns();\n  if (new RegExp(patterns.intersection, 'i').test(original)) {\n    return parseIntersection(original, options);\n  }\n\n  // Check for PO Box\n  const poBoxMatch = original.match(new RegExp(`^\\\\s*${patterns.poBox}`, 'i'));\n  if (poBoxMatch) {\n    return parsePoBox(original, options);\n  }\n\n  // Try standard address parsing\n  return parseStandardAddress(original, options) || parseInformalAddress(original, options);\n}\n\n/**\n * Parse PO Box addresses\n */\nfunction parsePoBox(address: string, options: ParseOptions = {}): ParsedAddress | null {\n  const patterns = buildPatterns();\n  const match = address.match(new RegExp(\n    `^\\\\s*${patterns.poBox}\\\\s*,?\\\\s*` +\n    `(?:([^\\\\d,]+?)\\\\s*,?\\\\s*)?` +  // city\n    `(?:${patterns.state}\\\\s*)?` +   // state\n    `(?:${patterns.zip})?\\\\s*$`, 'i'\n  ));\n\n  if (!match) return null;\n\n  const result: ParsedAddress = {\n    sec_unit_type: match[0].replace(/\\s*\\d+.*$/, '').trim(),\n    sec_unit_num: match[1]\n  };\n\n  if (match[2]) result.city = match[2].trim();\n  if (match[3]) result.state = match[3].toUpperCase();\n  if (match[4]) result.zip = match[4];\n\n  // Detect country\n  result.country = detectCountry(result);\n\n  return result;\n}\n\n/**\n * Parse standard addresses with number, street, type, city, state, zip\n */\nfunction parseStandardAddress(address: string, options: ParseOptions = {}): ParsedAddress | null {\n  const patterns = buildPatterns();\n  \n  // Split by comma to handle comma-separated components\n  const commaParts = address.split(',').map(p => p.trim());\n  \n  // Extract ZIP from end\n  let zipPart = '';\n  let cityStatePart = '';\n  let addressPart = commaParts[0];\n  \n  if (commaParts.length > 1) {\n    const lastPart = commaParts[commaParts.length - 1];\n    const zipMatch = lastPart.match(new RegExp(patterns.zip));\n    if (zipMatch) {\n      zipPart = zipMatch[1];\n      cityStatePart = lastPart.replace(zipMatch[0], '').trim();\n      if (commaParts.length > 2) {\n        cityStatePart = commaParts[commaParts.length - 2] + ' ' + cityStatePart;\n      }\n    } else {\n      cityStatePart = commaParts.slice(1).join(' ');\n    }\n  }\n  \n  const result: ParsedAddress = {};\n  \n  // Parse address part (number, street, type, etc.)\n  const addressMatch = addressPart.match(new RegExp(\n    `^\\\\s*` +\n    `(?:${patterns.number}\\\\s+)?` +           // number\n    `(?:${patterns.fraction}\\\\s+)?` +         // fraction\n    `(?:${patterns.directional}\\\\s+)?` +      // prefix directional\n    `([^\\\\s]+(?:\\\\s+[^\\\\s]+)*)\\\\s*` +         // street name (capture everything else)\n    `(?:${patterns.streetType}\\\\b\\\\s*)?` +    // street type\n    `(?:${patterns.directional}\\\\s*)?` +      // suffix directional\n    `(?:${patterns.secUnit}\\\\s*)?` +          // secondary unit\n    `$`, 'i'\n  ));\n\n  if (addressMatch) {\n    let i = 1;\n    if (addressMatch[i]) result.number = addressMatch[i++];\n    if (addressMatch[i]) result.fraction = addressMatch[i++];\n    if (addressMatch[i]) result.prefix = addressMatch[i++].toUpperCase();\n    \n    // Parse street name and type from remaining text\n    let streetText = addressMatch[i++];\n    if (streetText) {\n      // Extract street type from end of street text\n      const streetTypeMatch = streetText.match(new RegExp(`\\\\b(${patterns.streetType.slice(1, -1)})\\\\b\\\\s*$`, 'i'));\n      if (streetTypeMatch) {\n        result.type = normalizeStreetType(streetTypeMatch[1]);\n        result.street = streetText.replace(streetTypeMatch[0], '').trim();\n      } else {\n        result.street = streetText.trim();\n      }\n    }\n    \n    if (addressMatch[i]) result.suffix = addressMatch[i++].toUpperCase();\n    if (addressMatch[i] && addressMatch[i + 1]) {\n      result.sec_unit_type = addressMatch[i++].toLowerCase();\n      result.sec_unit_num = addressMatch[i++];\n      result.unit = `${result.sec_unit_type} ${result.sec_unit_num}`;\n    }\n  }\n  \n  // Parse city/state part\n  if (cityStatePart) {\n    const cityStateMatch = cityStatePart.match(new RegExp(`^(.+?)\\\\s+${patterns.state}\\\\s*$`, 'i'));\n    if (cityStateMatch) {\n      result.city = cityStateMatch[1].trim();\n      result.state = cityStateMatch[2].toUpperCase();\n    } else {\n      // Just state, no city\n      const stateMatch = cityStatePart.match(new RegExp(`^${patterns.state}\\\\s*$`, 'i'));\n      if (stateMatch) {\n        result.state = stateMatch[1].toUpperCase();\n      } else {\n        result.city = cityStatePart;\n      }\n    }\n  }\n  \n  // Add ZIP\n  if (zipPart) {\n    result.zip = zipPart;\n  }\n\n  // Detect country if not set\n  result.country = detectCountry(result);\n\n  // Return result if we have meaningful components\n  return (result.number || result.street) ? result : null;\n}\n\n/**\n * Parse informal addresses (fallback)\n */\nfunction parseInformalAddress(address: string, options: ParseOptions = {}): ParsedAddress | null {\n  const patterns = buildPatterns();\n  \n  // Simple fallback pattern\n  const parts = address.split(/\\s*,\\s*/);\n  if (parts.length === 0) return null;\n\n  const result: ParsedAddress = {};\n  \n  // Try to extract number from first part\n  const firstPart = parts[0];\n  const numberMatch = firstPart.match(new RegExp(`^\\\\s*${patterns.number}\\\\s+(.+)$`));\n  if (numberMatch) {\n    result.number = numberMatch[1];\n    result.street = numberMatch[2];\n  } else {\n    result.street = firstPart;\n  }\n\n  // Extract ZIP from last part\n  if (parts.length > 1) {\n    const lastPart = parts[parts.length - 1];\n    const zipMatch = lastPart.match(new RegExp(patterns.zip));\n    if (zipMatch) {\n      result.zip = zipMatch[1];\n      result.country = 'US';\n    }\n  }\n\n  return result;\n}\n\n/**\n * Normalize street type using mapping\n */\nfunction normalizeStreetType(type: string): string {\n  const normalized = type.toLowerCase().replace(/\\./g, '');\n  return US_STREET_TYPES[normalized] || type.toLowerCase();\n}\n\n/**\n * Parse intersection addresses \n */\nfunction parseIntersection(address: string, options: ParseOptions = {}): ParsedIntersection | null {\n  const patterns = buildPatterns();\n  \n  // Split on intersection indicators\n  const intersectionPattern = new RegExp(patterns.intersection, 'i');\n  const parts = address.split(intersectionPattern);\n  \n  if (parts.length !== 2) return null;\n\n  const result: ParsedIntersection = {};\n  \n  // Parse location info from the end of the address\n  let locationText = parts[1].trim();\n  \n  // Extract city, state, zip\n  const locationMatch = locationText.match(new RegExp(\n    `(.+?)\\\\s*,?\\\\s*([^,]+?)\\\\s*,?\\\\s*${patterns.state}\\\\s*(?:${patterns.zip})?\\\\s*$`, 'i'\n  ));\n  \n  if (locationMatch) {\n    result.city = locationMatch[2].trim();\n    result.state = locationMatch[3].toUpperCase();\n    if (locationMatch[4]) result.zip = locationMatch[4];\n    locationText = locationMatch[1].trim();\n  } else {\n    // Try just city and state\n    const simpleLocationMatch = locationText.match(new RegExp(\n      `(.+?)\\\\s+${patterns.state}\\\\s*$`, 'i'\n    ));\n    if (simpleLocationMatch) {\n      result.city = simpleLocationMatch[1].trim();\n      result.state = simpleLocationMatch[2].toUpperCase();\n      locationText = '';\n    }\n  }\n  \n  // Parse first street\n  const street1Text = parts[0].trim();\n  const street1Match = street1Text.match(new RegExp(\n    `^([^\\\\s]+(?:\\\\s+[^\\\\s]+)*)\\\\s*(?:(${patterns.streetType.slice(1, -1)})\\\\b)?\\\\s*$`, 'i'\n  ));\n  if (street1Match) {\n    result.street1 = street1Match[1].trim();\n    result.type1 = street1Match[2] ? normalizeStreetType(street1Match[2]) : '';\n  }\n\n  // Parse second street\n  const street2Text = locationText || parts[1].trim();\n  const street2Match = street2Text.match(new RegExp(\n    `^([^\\\\s]+(?:\\\\s+[^\\\\s]+)*)\\\\s*(?:(${patterns.streetType.slice(1, -1)})\\\\b)?`, 'i'\n  ));\n  if (street2Match) {\n    result.street2 = street2Match[1].trim();\n    result.type2 = street2Match[2] ? normalizeStreetType(street2Match[2]) : '';\n  }\n\n  // Ensure we have required fields\n  if (!result.street1 || !result.street2) return null;\n\n  // Set default empty types if not found\n  if (!result.type1) result.type1 = '';\n  if (!result.type2) result.type2 = '';\n\n  return result;\n}\n\n/**\n * Parse address (compatibility alias)\n */\nfunction parseAddress(address: string, options: ParseOptions = {}): ParsedAddress | null {\n  return parseLocation(address, options);\n}\n\n/**\n * Parse informal address (compatibility export)\n */\n// NOTE: parseInformalAddress is imported from utils\n\n/**\n * Create address parser instance\n */\nfunction createParser(defaultOptions: ParseOptions = {}): AddressParser {\n  return {\n    parseAddress: (address: string, options?: ParseOptions) => \n      parseAddress(address, { ...defaultOptions, ...options }),\n    parseInformalAddress: (address: string, options?: ParseOptions) => \n      parseInformalAddress(address, { ...defaultOptions, ...options }),\n    parseIntersection: (address: string, options?: ParseOptions) => \n      parseIntersection(address, { ...defaultOptions, ...options }),\n    parseLocation: (address: string, options?: ParseOptions) => \n      parseLocation(address, { ...defaultOptions, ...options }),\n  };\n}\n\n// Export default parser instance\nconst parser = createParser();\n\nexport {\n  createParser,\n  parseAddress,\n  parseInformalAddress,\n  parseIntersection,\n  parseLocation,\n  parser,\n};\n","/**\n * address-plus - A modern, TypeScript-first address parser and normalizer\n * API-compatible with parse-address for seamless upgrades\n */\n\nimport type { AddressParser } from \"./types\";\nimport { parseAddress, parseInformalAddress, parseIntersection, parseLocation } from \"./parser\";\n\n/**\n * Default export for API compatibility with parse-address\n * Usage: import parser from 'address-plus';\n *        parser.parseLocation('123 Main St, New York, NY 10001')\n * \n * Or: import { parseLocation } from 'address-plus';\n */\nconst parser: AddressParser = {\n  parseLocation,\n  parseIntersection, \n  parseInformalAddress,\n  parseAddress,\n};\n\n// Export all types\nexport type * from \"./types\";\n\n// Export parser functions\nexport { parseAddress, parseInformalAddress, parseIntersection, parseLocation };\n\n// Export data and utilities for advanced usage\nexport * from \"./data\";\nexport * from \"./utils\";\n\nexport default parser;"],"mappings":"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","names":["parser","parser"]}